service: () -> {
    addEquipmentToService: (text, text) -> (variant {Ok:record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addServiceToCustomer: (text, text) -> (variant {Ok:record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    completeReservePayment: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; CustomerId:text; payer:principal; price:nat64; paid_at_block:opt nat64; paidTo:principal}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createCustomer: (record {billingAddress:text; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}) -> (variant {Ok:record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createEquipment: (record {macAddress:text; equipmentType:text; serialNumber:text}) -> (variant {Ok:record {id:text; macAddress:text; equipmentType:text; serialNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createReservePayout: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; CustomerId:text; payer:principal; price:nat64; paid_at_block:opt nat64; paidTo:principal}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createService: (record {servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; installationDate:text}) -> (variant {Ok:record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getCustomer: (text) -> (variant {Ok:record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getCustomers: () -> (vec record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}) query;
    getEquipment: (text) -> (variant {Ok:record {id:text; macAddress:text; equipmentType:text; serialNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getEquipments: () -> (vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}) query;
    getService: (text) -> (variant {Ok:record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getServices: () -> (vec record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}) query;
    sortCustomer: () -> (vec record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}) query;
    updateCustomer: (text, record {billingAddress:text; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}) -> (variant {Ok:record {id:text; "service":record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; billingAddress:text; owner:principal; fullName:text; idDocumentNumber:text; contactNumber:text; emailAddress:text; idDocumentType:text; residentialAddress:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateEquipment: (text, record {macAddress:text; equipmentType:text; serialNumber:text}) -> (variant {Ok:record {id:text; macAddress:text; equipmentType:text; serialNumber:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateService: (text, record {servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; installationDate:text}) -> (variant {Ok:record {id:text; servicePlan:text; serviceType:text; paymentMethod:text; technicianName:text; servicePrice:nat64; billingCycle:text; connectionSpeed:text; serviceOwner:opt principal; installationDate:text; equipments:vec record {id:text; macAddress:text; equipmentType:text; serialNumber:text}}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
